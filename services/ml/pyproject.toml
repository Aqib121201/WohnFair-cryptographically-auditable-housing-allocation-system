[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wohnfair-ml"
version = "0.1.0"
description = "Machine Learning service for WohnFair housing allocation system"
authors = [
    {name = "WohnFair Team", email = "team@wohnfair.de"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["machine-learning", "housing", "allocation", "fairness", "cox-proportional-hazards", "xgboost"]
dependencies = [
    # Core ML libraries
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
    "catboost>=1.2.0",
    
    # Statistical modeling
    "lifelines>=0.27.0",
    "statsmodels>=0.14.0",
    "scipy>=1.10.0",
    
    # Deep learning (optional)
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    
    # Data processing
    "polars>=0.19.0",
    "vaex>=4.15.0",
    "dask>=2023.0.0",
    
    # Feature engineering
    "feature-engine>=1.6.0",
    "category-encoders>=2.6.0",
    "imbalanced-learn>=0.11.0",
    
    # Model interpretation
    "shap>=0.42.0",
    "lime>=0.2.0",
    "interpret>=0.4.0",
    
    # Hyperparameter tuning
    "optuna>=3.2.0",
    "hyperopt>=0.2.7",
    "ray[tune]>=2.6.0",
    
    # Model serving
    "mlflow>=2.5.0",
    "bentoml>=1.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.6.0",
    "clickhouse-connect>=0.6.0",
    "minio>=7.1.0",
    
    # gRPC and Protocol Buffers
    "grpcio>=1.56.0",
    "grpcio-tools>=1.56.0",
    "protobuf>=4.23.0",
    
    # Monitoring and observability
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-jaeger>=1.20.0",
    
    # Utilities
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "joblib>=1.3.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.80.0",
    
    # Development
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.25.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "bokeh>=3.2.0",
    "streamlit>=1.25.0",
    "gradio>=3.35.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    "mlflow>=2.5.0",
]

gpu = [
    "torch[cu118]>=2.0.0",
    "tensorflow-gpu>=2.13.0",
    "cupy-cuda11x>=12.0.0",
    "rapids-cudf>=23.0.0",
    "rapids-cuml>=23.0.0",
]

distributed = [
    "ray[data,serve]>=2.6.0",
    "dask[distributed]>=2023.0.0",
    "horovod>=0.27.0",
    "petastorm>=0.13.0",
]

[project.scripts]
wohnfair-ml = "wohnfair_ml.cli:main"
wohnfair-train = "wohnfair_ml.cli:train"
wohnfair-serve = "wohnfair_ml.cli:serve"
wohnfair-evaluate = "wohnfair_ml.cli:evaluate"

[project.urls]
Homepage = "https://github.com/wohnfair/wohnfair"
Documentation = "https://wohnfair.readthedocs.io"
Repository = "https://github.com/wohnfair/wohnfair.git"
"Bug Tracker" = "https://github.com/wohnfair/wohnfair/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["wohnfair_ml*"]

[tool.setuptools.package-data]
"wohnfair_ml" = ["py.typed", "*.pyi", "**/*.pyi"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wohnfair_ml"]
known_third_party = ["numpy", "pandas", "sklearn", "torch", "tensorflow"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
    "sklearn.*",
    "xgboost.*",
    "lightgbm.*",
    "catboost.*",
    "lifelines.*",
    "statsmodels.*",
    "scipy.*",
    "torch.*",
    "tensorflow.*",
    "grpcio.*",
    "grpcio_tools.*",
    "protobuf.*",
    "opentelemetry.*",
    "prometheus_client.*",
    "mlflow.*",
    "bentoml.*",
    "fastapi.*",
    "uvicorn.*",
    "sqlalchemy.*",
    "psycopg2.*",
    "redis.*",
    "clickhouse_connect.*",
    "minio.*",
    "pydantic.*",
    "pydantic_settings.*",
    "click.*",
    "rich.*",
    "tqdm.*",
    "joblib.*",
    "pytest.*",
    "pytest_cov.*",
    "pytest_mock.*",
    "pytest_asyncio.*",
    "hypothesis.*",
    "black.*",
    "isort.*",
    "flake8.*",
    "pre_commit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/\.venv/*",
    "*/\.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.safety]
output = "text"
full-report = true
